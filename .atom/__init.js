// Your init script
//
// Atom will evaluate this file each time a new window is opened. It is run
// after packages are loaded/activated and after the previous editor state
// has been restored.
//
// An example hack to log to the console when each text editor is saved.
//
// atom.workspace.observeTextEditors (editor) ->
// editor.onDidSave ->
// console.log "Saved! #{editor.getPath()}"
function atomTest() {
    console.dir(atom.workspace);
    atom.workspace.buildTextEditor({autoHeight: false})

    // let editor_element = document.createElement('atom-text-editor');
    // let status = atom.workspace.buildTextEditor({
    //   mini: true,//   # １行のみのエディHello Worldタ
    //   lineNumberGutterVisible: false,//  # 行番号は非表示
    //   placeholderText: 'Macro name'  //  # 説明文
    // })
    // atom.notifications.addSuccess(status);
}

function getActivePath() {
  const path = atom.workspace.getActiveTextEditor().getPath();
  atom.notifications.addSuccess(path);
  return path;
}

function getActiveDirectory() {
  {GitRepository} = require 'atom';
  git = atom.project.getRepositories()[0];
  atom.notifications.addSuccess(path);
  // ::getPath();
}

function getFileName() {
  return atom.workspace.getActiveTextEditor().getTitle();
}

function createTestFile() {
  const tests_directory = '/Users/oki.suguru/dev-environment/core/tests/unit/MyClass/';
  const dataproviders_directory = '/Users/oki.suguru/dev-environment/core/tests/unit/MyClass/DataProvider/';
  let file_name = getFileName();
  const class_name = file_name.slice(0, -4);
  console.log(class_name);
  createFile(tests_directory, class_name, 'Test.php');
  console.log('一つ目終わり');
  createFile(dataproviders_directory, class_name, 'DataProvider.php');
  console.log('二つ目終わり');
}

function createFile(create_directory_path, class_name, suffix) {
  console.log(create_directory_path);
  console.log(class_name);
  const { File } = require('atom');
  // Create file
  let myFile = new File(create_directory_path + class_name + suffix);
  console.dir(myFile);
  myFile.create();
}

let OneLineInputView = (function() {
  OneLineInputView.prototype.callback = null;

  OneLineInputView.prototype.element = null;

  OneLineInputView.prototype.editorElement = null;

  OneLineInputView.prototype.editor = null;

  function OneLineInputView(serializedState) {
    var self;
    this.element = document.createElement('div');
    this.element.classList.add('atom-keyboard-macros');
    this.editorElement = document.createElement('atom-text-editor');
    this.editor = atom.workspace.buildTextEditor({
      mini: true,
      lineNumberGutterVisible: false,
      placeholderText: 'Macro name'
    });

    this.editorElement.setModel(this.editor);
    self = this;
    this.editorElement.onkeydown = function(e) {
      var value;
      if (e.keyIdentifier === 'Enter') {
        value = self.editor.getText();
        self.clearText();
        return typeof self.callback === "function" ? self.callback(value) : void 0;
      }
    };
    this.element.appendChild(this.editorElement);
  }

  OneLineInputView.prototype.focus = function() {
    return this.editorElement.focus();
  };


  OneLineInputView.prototype.clearText = function() {
    return this.editor.setText('');
  };

  OneLineInputView.prototype.serialize = function() {};

  OneLineInputView.prototype.destroy = function() {
    return this.element.remove();
  };

  OneLineInputView.prototype.getelement = function() {
    return this.element;
  };

  OneLineInputView.prototype.setcallback = function(callback) {
    return this.callback = callback;
  };

  return OneLineInputView;

})();

function input() {
    let sample = new OneLineInputView();
    module.exports = sample;
    // sample.OneLineInputView();
}

// ---
// generated by coffee-script 1.9.2

function test() {
  const { TreeView } = require('tree-view');
  let tree = new TreeView();
  console.dir(tree);
}

function package_test() {
  const { Package } = require('atom');
  console.dir(new Package());
}

function test2() {
    this.element = document.createElement('div');
    this.element.classList.add('atom-keyboard-macros');

    let editor = atom.workspace.buildTextEditor({
        mini: true,
        lineNumberGutterVisible: false,
        placeholderText: 'Macro name'
    });
    console.dir(editor);
}

function copyCommitTemplate() {
  let ticket_number = getTicketNumber();
  let message = "[修正] \n\nrefs #" + ticket_number;
  atom.clipboard.write(message);
}

function getTicketNumber() {
    let repo = atom.project.getRepositories()[0];
    const regex = /.*_([0-9]{1,6}).*/i;
    return repo.branch.match(regex)[1];
}

function zeroPadding(num, length) {
    return ('0000000000' + num).slice(-length);
}

function getDate() {
    let today = new Date();
    return today.getFullYear().toString() + zeroPadding((today.getMonth() + 1), 2).toString() + today.getDate().toString();
}

function createBeforeNeSystemQuery() {
    let ticket_number = getTicketNumber();
    let date = getDate();
    atom.notifications.addSuccess(date + '_' + ticket_number + '_before_');
}

function funcEnclose1() {
  let editor = atom.workspace.getActiveTextEditor();
  if (editor === null) {
    return;
  }

  let text = editor.getSelectedText();
  if (text !== '') {
    editor.insertText(`/*${text}*/`);
  }
}

function funcEnclose2() {
  let editor = atom.workspace.getActiveTextEditor();
  if (editor === null) {
    return;
  }

  let text = editor.getSelectedText();
  if (text !== "") {
    editor.insertText(`"${text}"`);
  }
}

atom.commands.add("atom-text-editor", {
  "commandEnclose1": funcEnclose1,
  "commandEnclose2": funcEnclose2,
  "createTestFile": createTestFile,
  "createNeSystemQuery": createBeforeNeSystemQuery,
  "atomTest": atomTest,
  "getActivePath": getActivePath,
  "getFileName": getFileName,
  "test": test,
  "TestPackage": package_test,
  "input": input,
  "getActiveDirectore": getActiveDirectory,
  "copyCommitTemplate": copyCommitTemplate
});

atom.menu.add([{
  "label": "InitScript",
  "submenu": [
    { "label": "enclose1", "command": "commandEnclose1" },
    { "label": "enclose2", "command": "commandEnclose2" },
  ],
}]);
atom.menu.update();
atom.contextMenu.add({
  "atom-text-editor": [
    { "label": "enclose1", "command": "commandEnclose1" },
    { "label": "enclose2", "command": "commandEnclose2" },
  ],
});
